/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/cats": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cats.id"];
          created_at?: parameters["rowFilter.cats.created_at"];
          feeder_id?: parameters["rowFilter.cats.feeder_id"];
          /** location and address.  location has timestamp */
          whereAbouts?: parameters["rowFilter.cats.whereAbouts"];
          name?: parameters["rowFilter.cats.name"];
          pets?: parameters["rowFilter.cats.pets"];
          temperament?: parameters["rowFilter.cats.temperament"];
          description?: parameters["rowFilter.cats.description"];
          /** penis or not */
          gender?: parameters["rowFilter.cats.gender"];
          /** array of whereabouts sorted by timestamp preferably */
          lastSeen?: parameters["rowFilter.cats.lastSeen"];
          /** array of picture urls */
          gallery?: parameters["rowFilter.cats.gallery"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["cats"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** cats */
          cats?: definitions["cats"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cats.id"];
          created_at?: parameters["rowFilter.cats.created_at"];
          feeder_id?: parameters["rowFilter.cats.feeder_id"];
          /** location and address.  location has timestamp */
          whereAbouts?: parameters["rowFilter.cats.whereAbouts"];
          name?: parameters["rowFilter.cats.name"];
          pets?: parameters["rowFilter.cats.pets"];
          temperament?: parameters["rowFilter.cats.temperament"];
          description?: parameters["rowFilter.cats.description"];
          /** penis or not */
          gender?: parameters["rowFilter.cats.gender"];
          /** array of whereabouts sorted by timestamp preferably */
          lastSeen?: parameters["rowFilter.cats.lastSeen"];
          /** array of picture urls */
          gallery?: parameters["rowFilter.cats.gallery"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cats.id"];
          created_at?: parameters["rowFilter.cats.created_at"];
          feeder_id?: parameters["rowFilter.cats.feeder_id"];
          /** location and address.  location has timestamp */
          whereAbouts?: parameters["rowFilter.cats.whereAbouts"];
          name?: parameters["rowFilter.cats.name"];
          pets?: parameters["rowFilter.cats.pets"];
          temperament?: parameters["rowFilter.cats.temperament"];
          description?: parameters["rowFilter.cats.description"];
          /** penis or not */
          gender?: parameters["rowFilter.cats.gender"];
          /** array of whereabouts sorted by timestamp preferably */
          lastSeen?: parameters["rowFilter.cats.lastSeen"];
          /** array of picture urls */
          gallery?: parameters["rowFilter.cats.gallery"];
        };
        body: {
          /** cats */
          cats?: definitions["cats"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          /** feeder to these cats */
          cats?: parameters["rowFilter.profiles.cats"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          /** feeder to these cats */
          cats?: parameters["rowFilter.profiles.cats"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          /** feeder to these cats */
          cats?: parameters["rowFilter.profiles.cats"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** @description table of cats */
  cats: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: uuid */
    feeder_id?: string;
    /**
     * Format: json
     * @description location and address.  location has timestamp
     */
    whereAbouts?: unknown;
    /** Format: text */
    name: string;
    /** Format: integer */
    pets?: number;
    /** Format: text */
    temperament?: string;
    /** Format: text */
    description?: string;
    /**
     * Format: boolean
     * @description penis or not
     */
    gender?: boolean;
    /**
     * Format: ARRAY
     * @description array of whereabouts sorted by timestamp preferably
     */
    lastSeen?: unknown[];
    /**
     * Format: ARRAY
     * @description array of picture urls
     */
    gallery?: unknown[];
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    website?: string;
    /**
     * Format: bigint
     * @description feeder to these cats
     *
     * Note:
     * This is a Foreign Key to `cats.id`.<fk table='cats' column='id'/>
     */
    cats?: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description cats */
  "body.cats": definitions["cats"];
  /** Format: bigint */
  "rowFilter.cats.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.cats.created_at": string;
  /** Format: uuid */
  "rowFilter.cats.feeder_id": string;
  /**
   * Format: json
   * @description location and address.  location has timestamp
   */
  "rowFilter.cats.whereAbouts": string;
  /** Format: text */
  "rowFilter.cats.name": string;
  /** Format: integer */
  "rowFilter.cats.pets": string;
  /** Format: text */
  "rowFilter.cats.temperament": string;
  /** Format: text */
  "rowFilter.cats.description": string;
  /**
   * Format: boolean
   * @description penis or not
   */
  "rowFilter.cats.gender": string;
  /**
   * Format: ARRAY
   * @description array of whereabouts sorted by timestamp preferably
   */
  "rowFilter.cats.lastSeen": string;
  /**
   * Format: ARRAY
   * @description array of picture urls
   */
  "rowFilter.cats.gallery": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.updated_at": string;
  /** Format: text */
  "rowFilter.profiles.username": string;
  /** Format: text */
  "rowFilter.profiles.avatar_url": string;
  /** Format: text */
  "rowFilter.profiles.website": string;
  /**
   * Format: bigint
   * @description feeder to these cats
   */
  "rowFilter.profiles.cats": string;
}

export interface operations {}

export interface external {}
